/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.amthuc.view;

import com.amthuc.dao.DishDAO;
import com.amthuc.dao.UserDAO;
import com.amthuc.model.Category;
import com.amthuc.model.Dish;
import com.amthuc.model.User;
import com.amthuc.utils.GLOBAL;
import com.amthuc.view.CategoryPanel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pia
 */
public class DishFrame extends javax.swing.JFrame {

    private int cate_id;
    private String cate_name;

    /**
     * Creates new form Dish
     */
    public DishFrame() {
        initComponents();
        cate_id = CategoryPanel.c_id;
        cate_name = CategoryPanel.c_name;
        txtCategory.setText(cate_name);
        initTable();
        initCbo();
        setVisible(true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDish = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtCategory = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cbbUnit = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(880, 600));
        setResizable(false);

        tblDish.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã", "Tên", "Đơn vị tính", "Giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDish);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("DANH SÁCH MÓN ĂN");

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnAdd.setText("Thêm mới");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Mã");

        txtCategory.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Tên");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Giá");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Đơn vị tính");

        cbbUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbUnitActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Danh mục");

        txtId.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(207, 207, 207)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(318, 318, 318)
                                .addComponent(jLabel1)))
                        .addGap(0, 235, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(cbbUnit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String err = checkForm();
        if (err.equals("")) {
            try {
                DishDAO dao = new DishDAO();
                Dish dish = new Dish();
                dish.setName(txtName.getText().toString().trim());
                dish.setPrice(Integer.parseInt(txtPrice.getText().toString().trim()));
                dish.setCategory(new Category(cate_id));
                dish.setUnit(cbbUnit.getSelectedItem().toString());
                int insert = dao.insert(dish);
                if (insert == 1) {
                    txtId.setText("");
                    txtName.setText("");
                    txtPrice.setText("");
                    cbbUnit.setSelectedIndex(1);
                    initTable();
                    showMessage("Thêm mới thành công!");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(DishFrame.class.getName()).log(Level.SEVERE, null, ex);
                showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
            } catch (SQLException ex) {
                Logger.getLogger(DishFrame.class.getName()).log(Level.SEVERE, null, ex);
                showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
            }
        } else {
            showMessage(err);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void cbbUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbUnitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbUnitActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (!txtId.getText().trim().equals("")) {
            String error = checkForm();
            if (error.equals("")) {

                try {
                    DishDAO dao = new DishDAO();
                    Dish dish = new Dish();
                    dish.setId(Integer.parseInt(txtId.getText().toString().trim()));
                    dish.setName(txtName.getText().toString().trim());
                    dish.setPrice(Float.parseFloat(txtPrice.getText().toString().trim()));
                    dish.setCategory(new Category(cate_id));
                    dish.setUnit(cbbUnit.getSelectedItem().toString());
                    int update = dao.update(dish);
                    if (update == 1) {
                        txtId.setText("");
                        txtName.setText("");
                        txtPrice.setText("");
                        cbbUnit.setSelectedIndex(1);
                        initTable();
                        showMessage("Cập nhật thành công!");
                    }

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(DishFrame.class.getName()).log(Level.SEVERE, null, ex);
                    showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
                } catch (SQLException ex) {
                    Logger.getLogger(DishFrame.class.getName()).log(Level.SEVERE, null, ex);
                    showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
                }
            } else {
                showMessage(error);
            }
        } else {
            showMessage("Chưa chọn món ăn nào");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (!txtId.getText().trim().equals("")) {
            try {
                DishDAO dao = new DishDAO();
                int delete = dao.delete(Integer.parseInt(txtId.getText().toString().trim()));
                if (delete == 1) {
                    txtId.setText("");
                    txtName.setText("");
                    txtPrice.setText("");
                    cbbUnit.setSelectedIndex(0);
                    initTable();
                    showMessage("Xóa thành công!");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(DishFrame.class.getName()).log(Level.SEVERE, null, ex);
                showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
            } catch (SQLException ex) {
                Logger.getLogger(DishFrame.class.getName()).log(Level.SEVERE, null, ex);
                showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
            }
        } else {
            showMessage("Chưa chọn món ăn nào");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DishFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DishFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DishFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DishFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new DishFrame().setVisible(true);
//            }
//        });
//    }    
    private void initTable() {
        try {
            DishDAO dao = new DishDAO();
            ArrayList<Dish> listDish = new ArrayList<>();
            listDish = (ArrayList<Dish>) dao.getByCategory(cate_id);
            Vector tblRecords = new Vector();
            Vector tblTitle = new Vector();
            tblTitle.add("Mã");
            tblTitle.add("Tên");
            tblTitle.add("Đơn vị tính");
            tblTitle.add("Giá");
            for (Dish lc : listDish) {
                Vector record = new Vector();
                record.add(lc.getId());
                record.add(lc.getName());
                record.add(lc.getUnit());
                record.add(lc.getPrice());
                tblRecords.add(record);
            }

            tblDish.setModel(new DefaultTableModel(tblRecords, tblTitle));
            tblDish.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    int row = tblDish.getSelectedRow();
                    txtId.setText(tblDish.getValueAt(row, 0).toString());
                    txtName.setText(tblDish.getValueAt(row, 1).toString());
                    txtCategory.setText(cate_name);
                    txtPrice.setText(tblDish.getValueAt(row, 3).toString());
                    cbbUnit.setSelectedItem(tblDish.getValueAt(row, 2).toString());
                }
            });
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
            showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
        } catch (SQLException ex) {
            Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
            showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cbbUnit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDish;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables

    private void initCbo() {
        for (String item : GLOBAL.DISH_UNIT.DISH_UNIT_DISPLAY) {
            cbbUnit.addItem(item);
        }
    }

    private String checkForm() {
        String error = "";
        if (txtName.getText().trim().equals("")) {
            error += "Tên không được để trống\n";
        }
        if (txtPrice.getText().trim().equals("")) {
            error += "Giá không được để trống\n";
        } else {
            try {
                Float.parseFloat(txtPrice.getText().trim());
            } catch (Exception e) {
                error += "Giá phải là số\n";
            }
        }
        return error;
    }

    private void showMessage(String msg) {
        JOptionPane.showMessageDialog(this, msg);
    }
}
