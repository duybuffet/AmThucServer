/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.amthuc.view;

import com.amthuc.dao.CategoryDAO;
import com.amthuc.dao.UserDAO;
import com.amthuc.model.Category;
import com.amthuc.model.User;
import com.amthuc.utils.GLOBAL;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pia
 */
public class UserPanel extends javax.swing.JPanel {

    /**
     * Creates new form UserPanel
     */
    public UserPanel() {
        dao = new UserDAO();
        initComponents();
        initTable();
        initCbb();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblUser = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        cbbLevel = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtPhone1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPass = new javax.swing.JPasswordField();

        tblUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã", "Tên truy cập", "Họ tên", "Số điện thoại", "Loại nhân viên"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUser);

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnAdd.setText("Thêm mới");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("NGƯỜI DÙNG");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Mã");

        txtId.setEditable(false);
        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Loại nhân viên");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Họ tên");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("SĐT");

        cbbLevel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Tên tài khoản");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Mật khẩu");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(193, 193, 193)
                                .addComponent(jLabel1)))
                        .addGap(109, 109, 109)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 185, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                .addGap(198, 198, 198)
                                .addComponent(jLabel4)
                                .addGap(50, 50, 50)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(cbbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(198, 198, 198))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPhone1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                    .addComponent(txtPass))))
                        .addContainerGap(20, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(cbbLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String error = checkForm();
        if (error.equals("")) {
            try {
                User user = new User();
                user.setUsername(txtUsername.getText().toString().trim());
                user.setFullName(txtName.getText().toString().trim());
                user.setPhone(txtPhone1.getText().toString().trim());
                user.setUserLevel(cbbLevel.getSelectedIndex());
                user.setPassword(txtPass.getText());
                boolean insert = dao.insert(user);
                if (insert) {
                    txtName.setText("");
                    txtId.setText("");
                    txtName.setText("");
                    txtUsername.setText("");
                    cbbLevel.setSelectedIndex(GLOBAL.USER_LEVEL.WAITER);
                    initTable();
                    showMessage("Thêm mới thành công!");
                } else {
                    showMessage("Tên tài khoản đã tồn tại! Vui lòng thử lại");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
                showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
            } catch (SQLException ex) {
                Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
                showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
            }
        } else {
            showMessage(error);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed

    }//GEN-LAST:event_txtIdActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (!txtId.getText().toString().trim().equals("")) {
            String error = checkForm();
            if (error.equals("")) {
                try {
                    User user = new User();
                    user.setId(Integer.parseInt(txtId.getText().toString().trim()));
                    user.setUsername(txtUsername.getText().toString().trim());
                    user.setFullName(txtName.getText().toString().trim());
                    user.setPhone(txtPhone1.getText().toString().trim());
                    user.setUserLevel(cbbLevel.getSelectedIndex());
                    user.setPassword(txtPass.getText());
                    int insert = dao.update(user);
                    if (insert == 1) {
                        txtName.setText("");
                        txtId.setText("");
                        txtName.setText("");
                        txtUsername.setText("");
                        txtPass.setText("");
                        cbbLevel.setSelectedIndex(0);
                        initTable();
                        showMessage("Cập nhật thành công!");
                    } else {
                        showMessage("Tên tài khoản trùng với tên tài khoản đã tồn tài! Vui lòng thử lại");
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
                    showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
                } catch (SQLException ex) {
                    Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
                    showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
                }
            } else {
                showMessage(error);
            }
        } else {
            showMessage("Chưa chọn người dùng nào.");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (!txtId.getText().toString().trim().equals("")) {
            try {

                int delete = dao.delete(Integer.parseInt(txtId.getText().toString().trim()));
                if (delete == 1) {
                    txtName.setText("");
                    txtId.setText("");
                    txtName.setText("");
                    txtUsername.setText("");
                    initTable();
                    showMessage("Xóa thành công!");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
                showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
            } catch (SQLException ex) {
                Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
                showMessage("Có lỗi xảy ra ! Vui lòng thử lại sau.");
            }
        } else {
            showMessage("Chưa chọn người dùng nào");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    public JButton getBtnAdd() {
        return btnAdd;
    }

    public void setBtnAdd(JButton btnAdd) {
        this.btnAdd = btnAdd;
    }

    public JButton getBtnDelete() {
        return btnDelete;
    }

    public void setBtnDelete(JButton btnDelete) {
        this.btnDelete = btnDelete;
    }

    public JButton getBtnUpdate() {
        return btnUpdate;
    }

    public void setBtnUpdate(JButton btnUpdate) {
        this.btnUpdate = btnUpdate;
    }

    public JTextField getTxtFullname() {
        return txtName;
    }

    public void setTxtFullname(JTextField txtFullname) {
        this.txtName = txtFullname;
    }

    public JTextField getTxtId() {
        return txtId;
    }

    public void setTxtId(JTextField txtId) {
        this.txtId = txtId;
    }

    public JTextField getTxtPhone() {
        return txtUsername;
    }

    public void setTxtPhone(JTextField txtPhone) {
        this.txtUsername = txtPhone;
    }

    private void initTable() {
        try {
            ArrayList<User> listUser = new ArrayList<>();
            listUser = (ArrayList<User>) dao.getAll(LoginPanel.userLogin.getId());
            Vector tblRecords = new Vector();
            Vector tblTitle = new Vector();
            tblTitle.add("Mã");
            tblTitle.add("Tên truy cập");
            tblTitle.add("Họ và tên");
            tblTitle.add("Số điện thoại");
            tblTitle.add("Loại tài khoản");
            for (User lc : listUser) {
                Vector record = new Vector();
                record.add(lc.getId());
                record.add(lc.getUsername());
                record.add(lc.getFullName());
                record.add(lc.getPhone());
                record.add(GLOBAL.USER_LEVEL.USER_LEVEL_DISPLAY[lc.getUserLevel()]);
                System.out.println("display : " + GLOBAL.USER_LEVEL.USER_LEVEL_DISPLAY[lc.getUserLevel()]);
                tblRecords.add(record);
            }

            tblUser.setModel(new DefaultTableModel(tblRecords, tblTitle));
            tblUser.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    try {
                        int row = tblUser.getSelectedRow();
                        txtId.setText(tblUser.getValueAt(row, 0).toString());
                        User userClick = dao.get(Integer.parseInt(txtId.getText()));
                        txtName.setText(userClick.getFullName());
                        txtUsername.setText(userClick.getUsername());
                        txtPhone1.setText(userClick.getPhone());
                        txtPass.setText(userClick.getPassword());
                        cbbLevel.setSelectedIndex(userClick.getUserLevel());
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
                        showMessage("Có lỗi xảy ra!");
                    } catch (SQLException ex) {
                        Logger.getLogger(UserPanel.class.getName()).log(Level.SEVERE, null, ex);
                        showMessage("Có lỗi xảy ra!");
                    }
                }
            });
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(CategoryPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String checkForm() {
        String error = "";
        if (txtName.getText().toString().trim().equals("")) {
            error += "Họ tên không được để trống\n";
        }

        if (txtUsername.getText().toString().trim().equals("")) {
            error += "Tên tài khoản không được để trống\n";
        }

        if (txtPass.getText().equals("")) {
            error += "Mật khẩu không được để trống\n";
        } else {
            if (txtPass.getText().length() < 6) {
                error += "Mật khẩu phải nhiều hơn hoặc bằng 6 kí tự\n";
            }
        }
        return error;
    }

    private void showMessage(String msg) {
        JOptionPane.showMessageDialog(this, msg);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cbbLevel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblUser;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtPhone1;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private UserDAO dao;

    private void initCbb() {
        for (String item : GLOBAL.USER_LEVEL.USER_LEVEL_DISPLAY) {
            cbbLevel.addItem(item);
        }
    }
}
